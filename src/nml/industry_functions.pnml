#include "registers.pnml"
#include "random.pnml"


/***********************************
 * Stockpile and Production Defines
 ***********************************/

#define STOCKPILE_LIMIT 15000

#define PRODUCTION_BASE 16
#define PRODUCTION_MIN  5
#define PRODUCTION_MAX  255

// This could be with the template but only needs defined once
produce(noProduction, [], [])


/********************
 * Industry Type
 ********************/

#define IND_PRIMARY   0x01
#define IND_SECONDARY 0x03
#define IND_TERTIARY  0x02

#define IND_PRODUCES  0x01
#define IND_CONSUMES  0x02


/********************
 * Initialisation
 ********************/

switch(FEAT_INDUSTRIES, SELF, initPermanentStorage,
    SET_PERM(PRODUCTION_RATE, PRODUCTION_BASE)
) { return; }


/********************
 * Extra Text
 ********************/

// Debugging for now, should display useful information in future!
switch(FEAT_INDUSTRIES, SELF, genExtraText, [
    STORE_TEMP(GET_PERM(PRODUCTION_RATE), 256),
    STORE_TEMP(production_level, 257),

    STORE_TEMP(GET_PERM(DEBUG_0), 258),
    STORE_TEMP(GET_PERM(DEBUG_1), 259),
    STORE_TEMP(GET_PERM(DEBUG_2), 260),
    STORE_TEMP(GET_PERM(DEBUG_3), 261),
]) {
    return string(STR_INDUSTRY_EXTRA_TEXT);
}


/********************
 * Closure
 ********************/

/* If an industry has not produced anything in 60 consecutive months (5 years)
 * it is considered abandoned and has a chance of closing. */
#define ABANDONMENT_THRESHOLD 60
#define CLOSURE_CHANCE        180

#define INC_ABANDONMENT_PERIOD() \
    SET_PERM(ABANDONMENT_PERIOD, GET_PERM(ABANDONMENT_PERIOD) + 1)
#define RESET_ABANDONMENT_PERIOD() SET_PERM(ABANDONMENT_PERIOD, 0)

switch(FEAT_INDUSTRIES, SELF, isAbandoned, cargo_produced, [
    (cargo_produced == 0)
        ? INC_ABANDONMENT_PERIOD()
        : RESET_ABANDONMENT_PERIOD(),
    GET_PERM(ABANDONMENT_PERIOD) > ABANDONMENT_THRESHOLD
]) {
    1: randomChance(1, CLOSURE_CHANCE);
    0;
}


/********************
 * Production Changes
 ********************/

/* setProductionRate()
 * Convenience function to set production rate. */
switch(FEAT_INDUSTRIES, SELF, setProductionRate, rate,
    SET_PERM(PRODUCTION_RATE, clamp(rate, PRODUCTION_MIN, PRODUCTION_MAX))
){ return; }

switch(FEAT_INDUSTRIES, SELF, setProductionLevel, [
    // naively half the rate to get the level, for now anyway
    STORE_TEMP((GET_PERM(PRODUCTION_RATE) / 2) << 16, 0x100)
]) {
    return CB_RESULT_IND_PROD_SET_BY_0x100;
}

/* chanceToIncrease(percent)
 * Returns chance based on percent parameter. Should closely mirror the values
 * used in a smooth economy */
switch(FEAT_INDUSTRIES, SELF, chanceToIncrease, percent,
    percent
) {
    0..60:   randomChance(1, 3);
    61..80:  randomChance(2, 3);
    81..100: randomChance(5, 6);
}

/* updateProduction(cargo_waiting, cargo_transported)
 * Calculate production change based on industy type, current production rate,
 * waiting cargo, and cargo transported. */

// Industries have 8 or 9 production cycles a month so we use (8.5 * 6)
#define PROD_CYCLE_SIX_MONTHS 51
// Maximum change allowed by assessment of stockpile level
#define MAX_CHANGE_STOCKPILE_PCT 20

switch(FEAT_INDUSTRIES, SELF, updateProduction,
    industry_type,
    cargo_waiting,
    cargo_transported,
[
    // calculate impact of stockpile level
    (industry_type & IND_CONSUMES) ? [
        SET_TEMP(DIFFERENCE,
            (cargo_waiting / PROD_CYCLE_SIX_MONTHS) - GET_PERM(PRODUCTION_RATE)
        ),
        SET_TEMP(LIMIT,
            GET_PERM(PRODUCTION_RATE) * MAX_CHANGE_STOCKPILE_PCT / 100
        ),
        SET_TEMP(STOCKPILE_CHANGE,
            clamp(
                GET_TEMP(DIFFERENCE),
                GET_TEMP(LIMIT) * -1,
                GET_TEMP(LIMIT))
        ),
    ] : [
        SET_TEMP(STOCKPILE_CHANGE, 0)
    ],


    // calculate impact of transported cargo
    (industry_type & IND_PRODUCES) ? [
        // this gives a change in the range 3-23%, just like the smooth economy
        // option
        // FIX: calc range values from PRODUCTION_RATE
        SET_TEMP(RANDOM_CHANGE,
            max(1, randomRange(10, 60) * GET_PERM(PRODUCTION_RATE) / PRODUCTION_MAX)
        ),
        SET_TEMP(CHANGE_DIRECTION,
            chanceToIncrease(cargo_transported) ? 1 : -1
        ),
        SET_TEMP(TRANSPORTED_CHANGE,
            GET_TEMP(RANDOM_CHANGE) * GET_TEMP(CHANGE_DIRECTION)
        ),
    ] : [
        SET_TEMP(TRANSPORTED_CHANGE, 0)
    ],

    setProductionRate(
        GET_PERM(PRODUCTION_RATE)
            + GET_TEMP(STOCKPILE_CHANGE)
            + GET_TEMP(TRANSPORTED_CHANGE)
    ),

    setProductionLevel()
]) { return; }

/* shouldProductionChange(cargo_waiting, cargo_transported)
 * Random probability of change as long as output cargo has been transported */
#define PRODUCTION_CHANGE_PROB 3
switch(FEAT_INDUSTRIES, SELF, shouldProductionChange,
    cargo_waiting,
    cargo_transported,
[
    randomChance(1, PRODUCTION_CHANGE_PROB)
        && (cargo_transported > 0)
]) {
    1: updateProduction(IND_SECONDARY, cargo_waiting, cargo_transported);
    CB_RESULT_IND_PROD_NO_CHANGE;
}

/* evalProduction(cargo_waiting, cargo_produced, cargo_transported)
 * Initial check to see if the industry has been abandoned. Not all parameters
 * are used for this check, but are used later in the chain for potential
 * production changes. */
switch(FEAT_INDUSTRIES, SELF, evalProduction,
    cargo_waiting,
    cargo_produced,
    cargo_transported,
[
    initRandom(),
    isAbandoned(cargo_produced)
]) {
    1: CB_RESULT_IND_PROD_CLOSE;
    shouldProductionChange(cargo_waiting, cargo_transported);
}
