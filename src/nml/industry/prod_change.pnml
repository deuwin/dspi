/********************
 * Production Change
 ********************/

// Industries have 8 or 9 production ticks a month so we use 8.5 * 3 â‰ˆ 26
#define THREE_MONTH_PROD_TICKS 26
#define STOCKPILE_REQUIRED     (THREE_MONTH_PROD_TICKS * GET_PERM(PRODUCTION_RATE))


/* setProductionRate()
 * Clamp and set production rate.
 */
switch(FEAT_INDUSTRIES, SELF, setProductionRate, rate,
    SET_PERM(PRODUCTION_RATE, clamp(rate, PRODUCTION_MIN, PRODUCTION_MAX))
){ return; }


/* setProductionLevel()
 * Set production level by halving the production rate. Not actually used by
 * anything I believe...
 */
// TODO: Remove this?
switch(FEAT_INDUSTRIES, SELF, setProductionLevel, [
    STORE_TEMP((GET_PERM(PRODUCTION_RATE) / 2) << 16, 0x100)
]) {
    return CB_RESULT_IND_PROD_SET_BY_0x100;
}


/* chanceToIncrease(percent)
 * Returns chance based on percent parameter. Should closely mirror the values
 * used in a smooth economy.
 */
switch(FEAT_INDUSTRIES, SELF, chanceToIncrease, percent,
    percent
) {
    0..60:   randomChance(1, 3);
    61..80:  randomChance(2, 3);
    81..100: randomChance(5, 6);
}


/* updateProduction(stockpile_average, transported_pct)
 * Calculate production change based on current production rate, stockpile
 * average, and cargo transported.
 */
// Maximum change allowed by assessment of stockpile level
#define MAX_CHANGE_STOCKPILE_PCT 20

switch(FEAT_INDUSTRIES, SELF, updateProduction,
    stockpile_average,
    transported_pct,
[
    // calculate impact of stockpile level
    (IND_CONSUMES) ? [
        SET_TEMP(DIFFERENCE,
            (stockpile_average / THREE_MONTH_PROD_TICKS) - GET_PERM(PRODUCTION_RATE)
        ),
        SET_TEMP(LIMIT,
            GET_PERM(PRODUCTION_RATE) * MAX_CHANGE_STOCKPILE_PCT / 100
        ),
        SET_TEMP(STOCKPILE_CHANGE,
            clamp(
                GET_TEMP(DIFFERENCE),
                GET_TEMP(LIMIT) * -1,
                GET_TEMP(LIMIT))
        ),
    ] : [
        SET_TEMP(STOCKPILE_CHANGE, 0)
    ],

    // calculate impact of transported cargo
    // The random range gives a change of approximately 3-23%, just like the
    // smooth economy option
    #define PROD_3_PCT  10
    #define PROD_23_PCT 60
    (IND_PRODUCES) ? [
        SET_TEMP(RANDOM_CHANGE,
            max(1, randomRange(PROD_3_PCT, PROD_23_PCT) * GET_PERM(PRODUCTION_RATE) / PRODUCTION_MAX)
        ),
        SET_TEMP(CHANGE_DIRECTION,
            chanceToIncrease(transported_pct) ? 1 : -1
        ),
        SET_TEMP(TRANSPORTED_CHANGE,
            GET_TEMP(RANDOM_CHANGE) * GET_TEMP(CHANGE_DIRECTION)
        ),
    ] : [
        SET_TEMP(TRANSPORTED_CHANGE, 0)
    ],

    // store variables for detailed info
    SET_PERM(PRODUCTION_RATE_PREV, GET_PERM(PRODUCTION_RATE)),
    SET_PERM(IMPACT_STOCKPILE,     GET_TEMP(STOCKPILE_CHANGE)),
    SET_PERM(IMPACT_TRANSPORTED,   GET_TEMP(TRANSPORTED_CHANGE)),

    setProductionRate(
        GET_PERM(PRODUCTION_RATE)
            + GET_TEMP(STOCKPILE_CHANGE)
            + GET_TEMP(TRANSPORTED_CHANGE)
    ),
    setProductionLevel()
]) { return; }


/* meetsChangeRequirements(stockpile_average, transported_pct)
 * Returns 1 if the industry has met the minimum requirements of stockpile level
 * and transported cargo.
 */
#define TRANSPORTED_PCT_REQ 70
switch(FEAT_INDUSTRIES, SELF, meetsChangeRequirements,
    stockpile_average,
    transported_pct,
[
    (GET_PERM(CHANGE_REQ_MET)) ? [
        1
    ]:[
        SET_TEMP(REQUIREMENTS_MET,
            stockpile_average >= STOCKPILE_REQUIRED
        ),
        (IND_PRODUCES) ? [
            SET_TEMP(REQUIREMENTS_MET,
                GET_TEMP(REQUIREMENTS_MET) && (transported_pct >= TRANSPORTED_PCT_REQ)
            ),
        ]:[0],
        SET_PERM(CHANGE_REQ_MET, GET_TEMP(REQUIREMENTS_MET))
    ]
]) { return; }


/* shouldProductionChange(stockpile_average, transported_pct)
 * Random probability of change if requirements have been met.
 */
#define PRODUCTION_CHANGE_PROB 22
switch(FEAT_INDUSTRIES, SELF, shouldProductionChange,
    stockpile_average,
    transported_pct,
[
    (meetsChangeRequirements(stockpile_average, transported_pct)) ? [
        randomChance(1, PRODUCTION_CHANGE_PROB)
    ]:[
        0
    ]
]) {
    1: updateProduction(stockpile_average, transported_pct);
    CB_RESULT_IND_PROD_NO_CHANGE;
}


/* evalProduction(stockpile_average, cargo_produced, transported_pct)
 * Initial abandonment check, followed by stockpile and transported cargo
 * checks.
 */
switch(FEAT_INDUSTRIES, SELF, evalProduction,
    stockpile_average,
    cargo_produced,
    transported_pct,
[
    initRandom(),
    (IND_PRODUCES)
        ? isAbandoned(cargo_produced)
        : 0
]) {
    1: closeIndustry();
    shouldProductionChange(stockpile_average, transported_pct);
}
