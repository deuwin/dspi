#ifndef POWER_PNML
#define POWER_PNML


// Power required per unit of cargo produced
#define DEMAND_PER_OUTPUT 250
// Power extracted from each unit of fuel. These are pretty inefficient power
// stations...
#define SUPPLY_PER_FUEL   1500


/********************
 * Demand Changes
 * Update the power required. Called by secondary industries
 ********************/

/* adjustPowerDemand(demand_change) */
switch(FEAT_INDUSTRIES, PARENT, adjustPowerDemand, demand_change, [
    setPerm(POWER_DEMAND_TOTAL, getPerm(POWER_DEMAND_TOTAL) + demand_change)
]) { return; }

/* setPowerDemand(cargo_produced, max_possible)
 * Calculate power required using current output and maximum possible at present
 * production rate. */
switch(FEAT_INDUSTRIES, SELF, setPowerDemand,
    cargo_produced,
    max_possible,
[
    setTemp(DEMAND_PRODUCED,
        cargo_produced * DEMAND_PER_OUTPUT
    ),
    // idling capacity demands 10% of active production power
    setTemp(DEMAND_IDLE,
        (max_possible - cargo_produced) * DEMAND_PER_OUTPUT / 10
    ),

    setTemp(DEMAND_CHANGE,
        getTemp(DEMAND_PRODUCED)
        + getTemp(DEMAND_IDLE)
        - getPerm(POWER_DEMAND_PREV)
    ),

    // WARNING: For reasons probably best known to NFO wizards,
    // adjustPowerDemand() won't work if there isn't some sort of
    // STORE_PERM() command prior to it.
    setPerm(POWER_DEMAND_PREV,
        getTemp(DEMAND_PRODUCED) + getTemp(DEMAND_IDLE)
    ),

    adjustPowerDemand(getTemp(DEMAND_CHANGE))
]) { return; }


/********************
 * Supply Changes
 * Update the power available. Called by power stations.
 ********************/

/* getFuelRequired() */
switch(FEAT_INDUSTRIES, PARENT, getFuelRequired, [
    divideCeil(getPerm(POWER_DEMAND_TOTAL), SUPPLY_PER_FUEL)
]) { return; }

/* adjustPowerSupplied(power_change) */
switch(FEAT_INDUSTRIES, PARENT, adjustPowerSupplied, power_change, [
    setPerm(POWER_SUPPLY_TOTAL, getPerm(POWER_SUPPLY_TOTAL) + power_change),
    setPerm(POWER_SUPPLY_PCT,
        getPerm(POWER_SUPPLY_TOTAL) * 100 / getPerm(POWER_DEMAND_TOTAL)
    )
]) { return; }

/* setPowerSupplied(fuel_consumed) */
switch(FEAT_INDUSTRIES, SELF, setPowerSupplied, fuel_consumed, [
    setPerm(BURN_RATE, fuel_consumed),
    setTemp(GENERATED_CHANGE,
        (fuel_consumed * SUPPLY_PER_FUEL) - getPerm(POWER_SUPPLY_PREV)
    ),
    setPerm(POWER_SUPPLY_PREV, fuel_consumed * SUPPLY_PER_FUEL),

    // NOTE: Similarly to setPowerDemand() passing variables between SELF and
    // PARENT is very fussy. setTemp() and setPerm() must be before this call
    // otherwise the change is not set correctly.
    adjustPowerSupplied(getTemp(GENERATED_CHANGE)),
]) { return; }


/********************
 * Accessors
 * For information display
 ********************/

/* getPowerSuppliedPct() */
switch(FEAT_INDUSTRIES, PARENT, getPowerSuppliedPct, [
    clamp(getPerm(POWER_SUPPLY_PCT), 0, 100)
]) { return; }

/* hasPowerDemand() */
switch(FEAT_INDUSTRIES, PARENT, hasPowerDemand, [
    getPerm(POWER_DEMAND_TOTAL) > 0
]) { return; }


#endif // POWER_PNML
