/********************
 * Production
 ********************/

#define PRODUCTION_BASE 16
#define PRODUCTION_MIN  5
#define PRODUCTION_MAX  255
#define BURN_RATE_MAX   127


produce(noProduction, [], [])


/********************
 * Power Plant
 ********************/

produce(power_plant_produceBlock,
    [
        COAL: getTemp(BURNED_COAL);
        OIL_: getTemp(BURNED_OIL);
    ], [],
    0
)

#define getStockpiled(fuel) incoming_cargo_waiting(#fuel)

switch(FEAT_INDUSTRIES, SELF, power_plant_calcProduction, [
    updateStockpileAverage(0, getStockpiled(COAL)),
    updateStockpileAverage(1, getStockpiled(OIL_)),

    setTemp(FUEL_STOCKPILED, getStockpiled(COAL) + getStockpiled(OIL_)),
    setTemp(FUEL_AVAILABLE, min(getTemp(FUEL_STOCKPILED), BURN_RATE_MAX)),
    setTemp(BURN_LIMIT,
        min(getTemp(FUEL_AVAILABLE), getFuelRequired())
    ),

    setTemp(BURNED_COAL,
        divideCeil(
            getStockpiled(COAL) * getTemp(BURN_LIMIT),
            getTemp(FUEL_STOCKPILED))
    ),
    setTemp(BURNED_OIL,
        divideCeil(
            getStockpiled(OIL_) * getTemp(BURN_LIMIT),
            getTemp(FUEL_STOCKPILED))
    ),
    setTemp(BURNED_TOTAL,
        getTemp(BURNED_COAL) + getTemp(BURNED_OIL)
    ),

    // using divideCeil() may cause the plant to burn a little extra than it
    // should, so that's adjusted here
    (getTemp(BURNED_TOTAL) > getTemp(BURN_LIMIT)) ? [
        (CMP(getStockpiled(COAL), getStockpiled(OIL_)) == CMP_LESS)
            ? setTemp(BURNED_COAL, getTemp(BURNED_COAL) - 1)
            : setTemp(BURNED_OIL,  getTemp(BURNED_OIL) - 1)
    ]:[0],

    setPowerSupplied(getTemp(BURNED_TOTAL)),
]) { return power_plant_produceBlock; }

