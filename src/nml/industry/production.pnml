/********************
 * Production
 ********************/

#define PRODUCTION_BASE 16
#define PRODUCTION_MIN  5
#define PRODUCTION_MAX  255
#define BURN_RATE_MAX   127


produce(noProduction, [], [])


/********************
 * Power Plant
 ********************/

produce(power_plant_produceBlock,
    [
        COAL: getTemp(BURNED_COAL);
        OIL_: getTemp(BURNED_OIL_);
    ], [],
    0
)

#define SET_BURNABLE(fuel) \
    setTemp(BURNABLE_##fuel, \
        min(incoming_cargo_waiting(#fuel), BURN_RATE_MAX) \
    )

#define SET_BURNED(fuel) \
    setTemp(BURNED_##fuel, \
        min(BURN_RATE_MAX, \
            divideCeil( \
                getTemp(BURNABLE_##fuel) * getTemp(FUEL_REQUIRED), \
                getTemp(BURNABLE_TOTAL) \
            ) \
        ) \
    )

switch(FEAT_INDUSTRIES, SELF, correctBurnedFuel, [
    CMP(incoming_cargo_waiting("COAL"), incoming_cargo_waiting("OIL_"))
]) {
    CMP_LESS: setTemp(BURNED_COAL, getTemp(BURNED_COAL) - 1);
    default:  setTemp(BURNED_OIL_, getTemp(BURNED_OIL_) - 1);
}

switch(FEAT_INDUSTRIES, SELF, power_plant_calcProduction, [
    updateStockpileAverage(0, incoming_cargo_waiting("COAL")),
    updateStockpileAverage(1, incoming_cargo_waiting("OIL_")),

    SET_BURNABLE(COAL),
    SET_BURNABLE(OIL_),
    setTemp(BURNABLE_TOTAL,
        getTemp(BURNABLE_COAL) + getTemp(BURNABLE_OIL_)
    ),

    setTemp(FUEL_REQUIRED, getFuelRequired()),
    SET_BURNED(COAL),
    SET_BURNED(OIL_),
    setTemp(BURNED_TOTAL, getTemp(BURNED_COAL) + getTemp(BURNED_OIL_)),

    // using divideCeil() may cause the plant to burn a little extra than it
    // should, so that's adjusted here
    (getTemp(BURNED_TOTAL) > getTemp(FUEL_REQUIRED))
        ? correctBurnedFuel()
        : 0,

    setPowerSupplied(getTemp(BURNED_TOTAL)),
]) { return power_plant_produceBlock; }

