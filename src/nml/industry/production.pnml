/********************
 * Production
 ********************/

#define PRODUCTION_BASE 16
#define PRODUCTION_MIN  5
#define PRODUCTION_MAX  255
#define BURN_RATE_MAX   127


produce(noProduction, [], [])


/********************
 * Power Plant
 ********************/

produce(power_plant_produceBlock,
    [
        COAL: getTemp(CONSUME_0);
        OIL_: getTemp(CONSUME_1);
    ], [],
    0
)

#define AVAIL_NAME(name) AVAILABLE_##name
#define SET_AVAILABLE(cargo) \
    setTemp(AVAIL_NAME(cargo), \
        min(incoming_cargo_waiting(#cargo), BURN_RATE_MAX) \
    )

switch(FEAT_INDUSTRIES, SELF, fixOvershoot, [
    CMP(incoming_cargo_waiting("COAL"), incoming_cargo_waiting("OIL_"))
]) {
    CMP_LESS: setTemp(CONSUME_0, getTemp(CONSUME_0) - 1);
    default:  setTemp(CONSUME_1, getTemp(CONSUME_1) - 1);
}

switch(FEAT_INDUSTRIES, SELF, power_plant_calcProduction, [
    updateStockpileAverage(0, incoming_cargo_waiting("COAL")),
    updateStockpileAverage(1, incoming_cargo_waiting("OIL_")),

    SET_AVAILABLE(COAL),
    SET_AVAILABLE(OIL_),
    setTemp(AVAILABLE_TOTAL,
        getTemp(AVAILABLE_COAL) + getTemp(AVAILABLE_OIL_)
    ),

    (getTemp(AVAILABLE_TOTAL) == 0) ? [
        setTemp(CONSUME_0, 0),
        setTemp(CONSUME_1, 0)
    ]:[
        setTemp(FUEL_REQUIRED, getFuelRequired()),
        setTemp(CONSUME_0,
            divideCeil(
                getTemp(AVAILABLE_COAL) * getTemp(FUEL_REQUIRED),
                getTemp(AVAILABLE_TOTAL)
            )
        ),
        setTemp(CONSUME_1,
            divideCeil(
                getTemp(AVAILABLE_OIL_) * getTemp(FUEL_REQUIRED),
                getTemp(AVAILABLE_TOTAL)
            )
        )
    ],

    // using divideCeil() may cause the plant to burn a little extra than it
    // should, so that's adjusted here
    ((getTemp(CONSUME_0) + getTemp(CONSUME_1)) > getTemp(FUEL_REQUIRED))
        ? fixOvershoot()
        : 0,

    setPowerSupplied(getTemp(CONSUME_0) + getTemp(CONSUME_1)),
]) { return power_plant_produceBlock; }

