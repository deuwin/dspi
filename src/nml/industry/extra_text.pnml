/********************
 * Extra Text
 ********************/

/* setStringParameters()
 * Pack int16 into int32 register space
 */
// space available for string parameters in dwords (int32)
#define PARAM_MAX 6
#define STORE_STRING_PARAM(idx, _) \
    STORE_TEMP( \
        getArrayValue(idx * 2) & 0xFFFF | (getArrayValue(idx * 2 + 1) << 16), \
        256 + idx \
    ),
switch(FEAT_INDUSTRIES, SELF, setStringParameters, [
    REPEAT(PARAM_MAX, STORE_STRING_PARAM, ~)
]) { return; }


//
// Industry Power Status
//
switch(FEAT_INDUSTRIES, SELF, setPowerAvailableString, power_pct, [
    power_pct
]) {
    0:       setTemp(POWER_STATUS, string(STR_POWER_STATUS_NONE));
    1..99:   setTemp(POWER_STATUS, string(STR_POWER_STATUS_LOW));
    default: setTemp(POWER_STATUS, string(STR_EMPTY));
}

switch(FEAT_INDUSTRIES, SELF, setPowerStatus, power_pct, [
    // WARN: You can't use industry_town_count() directly here. It must be
    // stored and retrieved. Probably something to do with how using it trashes
    // the contents of temporary storage registers 0x100 and 0x101.
    setTemp(IND_COUNT, industry_town_count(power_plant)),
    (getTemp(IND_COUNT) == 0) ? [
        setTemp(POWER_PCT, 0),
        setTemp(POWER_STATUS, string(STR_POWER_STATUS_NO_POWER_STATION))
    ]:[
        setPowerAvailableString(power_pct)
    ],
]) { return; }


//
// Production Strings
//
/* setProductionCapacity() */
switch(FEAT_INDUSTRIES, SELF, setProductionCapacity, [
    (power_required == 1) ? [
        setTemp(POWER_PCT, getPowerSuppliedPct()),
        setPowerStatus(getTemp(POWER_PCT))
    ]:[
        setTemp(POWER_PCT, 100),
        setTemp(POWER_STATUS, string(STR_EMPTY)),
    ],

    append(getTemp(POWER_STATUS)),
    append(getPerm(PRODUCTION_RATE) * getTemp(POWER_PCT) / PRODUCTION_MAX)
]) { return; }

/* setProductionBreakdown()
 */
switch(FEAT_INDUSTRIES, SELF, setProductionBreakdown, [
    (show_prod_breakdown == 1) ? [
        append(string(STR_PROD_BREAKDOWN)),
        append(
            getPerm(IMPACT_STOCKPILE) * 100 / getPerm(PRODUCTION_RATE_PREV),
        ),
        append(
            getPerm(IMPACT_TRANSPORTED) * 100 / getPerm(PRODUCTION_RATE_PREV)
        ),
    ]:[0]
]) { return; }


//
// Stockpile String
//
#define STOCKPILE_PCT(value) (value * 100 / STOCKPILE_LIMIT)

switch(FEAT_INDUSTRIES, SELF, _setStockpileString,
    cargo_name,
    average,
    required,
[
    append(cargo_name),
    append(STOCKPILE_PCT(average)),
    append(STOCKPILE_PCT(required))
]) { return; }

switch(FEAT_INDUSTRIES, SELF, setStockpileStringRatio,
    cargo_name,
    average,
    required,
[
    _setStockpileString(cargo_name, average, required)
]) { return; }

switch(FEAT_INDUSTRIES, SELF, setStockpileString,
    cargo_name,
    average,
[
    _setStockpileString(cargo_name, average, STOCKPILE_REQUIRED)
]) { return; }


//
// Extra Text
//
switch(FEAT_INDUSTRIES, SELF, genExtraText, cargo_name, [
    clearArray(),

    setProductionCapacity(),

    setStockpileString(
        cargo_name,
        getStockpileAverage(0)),

    setProductionBreakdown(),

    setStringParameters()
]) {
    return string(STR_INDUSTRY_EXTRA_TEXT);
}

switch(FEAT_INDUSTRIES, SELF, temperate_factory_genExtraText, [
    clearArray(),

    setProductionCapacity(),

    setStockpileString(
        TTD_STR_CARGO_PLURAL_LIVESTOCK,
        getStockpileAverage(0)),
    setStockpileString(
        TTD_STR_CARGO_PLURAL_GRAIN,
        getStockpileAverage(1)),
    setStockpileString(
        TTD_STR_CARGO_PLURAL_STEEL,
        getStockpileAverage(2)),

    setProductionBreakdown(),

    setStringParameters()
]) {
    return string(STR_INDUSTRY_EXTRA_TEXT_FACTORY);
}

switch(FEAT_INDUSTRIES, SELF, getGridStatus, [
    getPowerSuppliedPct()
]) {
    0:       setTemp(GRID_STATUS, string(STR_GRID_NO_POWER));
    1..99:   setTemp(GRID_STATUS, string(STR_GRID_OVERLOADED));
    default: setTemp(GRID_STATUS, string(STR_GRID_HEALTHY));
}

switch(FEAT_INDUSTRIES, SELF, power_plant_genExtraText, [
    (hasPowerDemand())
        ? getGridStatus()
        : setTemp(GRID_STATUS, string(STR_GRID_NO_DEMAND)),

    setTemp(CAPACITY_PCT, getPerm(BURN_RATE) * 100 / BURN_RATE_MAX),

    // display a minimum of 1% production capacity if it would be rounded down
    // to zero
    (getTemp(CAPACITY_PCT) == 0 && getPerm(BURN_RATE) != 0)
        ? setTemp(CAPACITY_PCT, 1)
        : 0,

    clearArray(),

    append(getTemp(CAPACITY_PCT)),
    append(getTemp(GRID_STATUS)),
    append(TTD_STR_CARGO_PLURAL_COAL),
    append(getPerm(STOCKPILE_AVERAGE_0)),
    append(TTD_STR_CARGO_PLURAL_OIL),
    append(getPerm(STOCKPILE_AVERAGE_1)),

    setStringParameters()
]) {
    return string(STR_INDUSTRY_EXTRA_TEXT_POWER_PLANT);
}
