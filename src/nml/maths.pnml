#ifndef MATHS_PNML
#define MATHS_PNML

/********************
 * Maths
 ********************/

/* clamp(value, lower_limit, upper_limit) */
#define clamp(value, lower_limit, upper_limit) \
    min(upper_limit, max(lower_limit, value))


/* For an in-depth discussion on integer rounding implementation see:
 * https://blog.pkh.me/p/36-figuring-out-round%2C-floor-and-ceil-with-integer-division.html
 */

/* divideCeilUInt(numerator, denominator)
 * Round up integer division. NOTE: Only for positive parameters!
 */
#define divideCeil(numerator, denominator) \
    (((numerator) + (denominator) - 1) / (denominator))


/* For the sake of completeness I'll note that for positive numbers standard
 * integer division is the same as a flooring function. */


/* divideRoundUInt(numerator, denominator)
 * Integer division with rounding. NOTE: Only for positive parameters!
 */
#define divideRoundUInt(numerator, denominator) \
    (((numerator) + ((denominator) / 2)) / (denominator))


/* divideRoundInt(numerator, denominator)
 * Signed integer division with rounding.
 */
#define divideRoundInt(numerator, denominator) \
    (((numerator ^ denominator) < 0) \
        ? ((numerator - (denominator / 2)) / denominator) \
        : ((numerator + (denominator / 2)) / denominator))

#endif // MATHS_PNML
