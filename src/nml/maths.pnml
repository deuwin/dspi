#ifndef MATHS_PNML
#define MATHS_PNML

/********************
 * Maths
 ********************/

/* clamp(value, lower_limit, upper_limit) */
#define clamp(value, lower_limit, upper_limit) \
    min(upper_limit, max(lower_limit, value))


/* For an in-depth discussion on integer rounding implementation see:
 * https://blog.pkh.me/p/36-figuring-out-round%2C-floor-and-ceil-with-integer-division.html
 */

#define LAST_COMPUTED(function, ...) \
     ((_##function(__VA_ARGS__) & 0x0) + last_computed_result)

/* divideCeil(dividend, divisor)
 * Signed integer division with ceiling function applied to result
 */
switch(FEAT_INDUSTRIES, SELF, _divideCeil, dividend, divisor, [
    dividend / divisor + (dividend % divisor != 0 && (((dividend ^ divisor) >> 31) == 0))
]) { return; }

#define divideCeil(dividend, divisor) LAST_COMPUTED(divideCeil, dividend, divisor)


/* divideFloor(dividend, divisor)
 * Signed integer division with flooring function applied to result
 */
switch(FEAT_INDUSTRIES, SELF, _divideFloor, dividend, divisor, [
    dividend / divisor - (dividend % divisor != 0 && (((dividend ^ divisor) >> 31) == 0))
]) { return; }

#define divideFloor(dividend, divisor) LAST_COMPUTED(divideFloor, dividend, divisor)


/* divideRound(dividend, divisor)
 * Signed integer division with rounding.
 */
switch(FEAT_INDUSTRIES, SELF, _divideRound, dividend, divisor, [
    (((dividend ^ divisor) >> 31) == 0)
        ? (dividend - divisor / 2) / divisor
        : (dividend + divisor / 2) / divisor
]) { return; }

#define divideRound(dividend, divisor) LAST_COMPUTED(divideRound, dividend, divisor)


#endif // MATHS_PNML
