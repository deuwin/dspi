from enum import IntEnum, unique
from dataclasses import dataclass, InitVar, field
from typing import Optional

from cargotable import CargoTable as Cargo


# fmt: off
@unique
class Sector(IntEnum):
    # matches the definition in industry.pnml, if that ever becomes relevant
    Primary   = 0x01
    Secondary = 0x03
    Tertiary  = 0x02


@dataclass(frozen=True)
class Industry:
    """
    Storage for basic data about each industry.

    Args:
        id (str): The industry identifier. Should be a string from the list of
            default industries. See:
            https://newgrf-specs.tt-wiki.net/wiki/NML:Default_industries
        input(str|list[str]): Cargo accepted by the industry.
        output(str): Cargo generated by the industry.
        tiles (list[int], optional): Industry tile IDs to override. Only
            required if you change accepted cargo from the default. A list of
            industry tile IDs can be found here:
            https://newgrf-specs.tt-wiki.net/wiki/NML:Default_industry_tiles
        ratio (list[int], optional): Ratio of inputs consumed to output
            generated. e.g. A ratio of [2, 1, 2] consumes 2 units of input_0 and
            1 unit of input_1 to produce 2 units of output.
    """

    id:     str
    _input: InitVar(str | list[str])
    input:  list[str] = field(init=None)
    output: str | None
    tiles:  Optional[list[int]] = None
    ratio:  Optional[list[int]] = field(default=None)

    def __post_init__(self, _input):
        # convert input if required
        _input = [_input] if isinstance(_input, str) else _input
        object.__setattr__(self, "input", _input)

        # validate ratio
        if self.ratio and len(self.ratio) != len(self.input) + 1:
            raise ValueError("Incorrect ratio length!")

    @property
    def name(self):
        return self.id[13:].lower()

    @property
    def sector(self):
        sector = 0
        sector += 2 if self.input else 0
        sector += 1 if self.output else 0
        return Sector(sector)


# temperate industries
INDUSTRIES = [
    # secondary
    Industry(
        "INDUSTRYTYPE_STEEL_MILL",
        [
            Cargo.IronOre,
            Cargo.Coal,
        ],
        Cargo.Steel,
        list(range(52, 58)),
        [2, 1, 2],
    ),
    Industry(
        "INDUSTRYTYPE_SAWMILL",
        Cargo.Wood,
        Cargo.Goods,
    ),
    Industry(
        "INDUSTRYTYPE_TEMPERATE_FACTORY",
        [
            Cargo.Livestock,
            Cargo.Grain,
            Cargo.Steel,
        ],
        Cargo.Goods,
    ),
    Industry(
        "INDUSTRYTYPE_OIL_REFINERY",
        Cargo.Oil,
        Cargo.Goods
    ),
    # tertiary
    Industry(
        "INDUSTRYTYPE_POWER_PLANT",
        [
            Cargo.Coal,
            Cargo.Oil,
        ],
        None,
        list(range(7, 11))
    ),
]
# fmt: on


def main(argv):
    for industry in INDUSTRIES:
        pprint.pprint(industry)


if __name__ == "__main__":
    import sys
    import pprint

    sys.exit(main(sys.argv))
